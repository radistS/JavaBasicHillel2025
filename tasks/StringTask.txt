Сумма цифр в строке:
Напишите программу, которая проходит по символам строки, определяет, какие из них являются цифрами, и суммирует их числовые значения.

Проверка уникальности символов:
Проверьте, состоит ли строка только из уникальных символов, используя цикл и условные операторы.

Нахождение самого длинного слова:
Разбейте строку на слова (например, по пробелам) и найдите слово с максимальной длиной.

Подсчёт слов, начинающихся с гласной:
Пройдитесь по словам строки и посчитайте, сколько из них начинаются с гласной буквы (как латинской, так и русской, по желанию).

Поиск подстроки без indexOf:
Реализуйте алгоритм поиска подстроки в строке (без использования встроенных методов) с помощью циклов и условных операторов.

Подсчёт повторений символа:
Напишите программу, которая для заданного символа подсчитывает, сколько раз он встречается в строке, используя цикл с условным оператором.

Разворот строки:
Реализуйте алгоритм, который проходит по символам строки в обратном порядке и формирует новую перевёрнутую строку.

Замена первого и последнего символа:
Поменяйте местами первый и последний символ строки. Учтите, что если строка состоит из одного символа, то изменений быть не должно.

Проверка на палиндром:
Определите, является ли строка палиндромом, сравнивая символы с начала и конца строки, используя цикл с оператором break при обнаружении несоответствия.

Замена цифр на символ #:
Пройдитесь по строке и замените каждый символ, являющийся цифрой, на символ #.

Проверка: только буквы или нет:
Пройдитесь по строке и с помощью условных операторов проверьте, состоят ли все её символы только из букв. При обнаружении иного символа можно сразу завершить цикл.

Нахождение чисел в строке и вычисление их среднего:
Если в строке содержатся цифры (или группы цифр, образующие числа), извлеките их, подсчитайте сумму и вычислите среднее значение.

Поиск первого повторяющегося символа:
Найдите и выведите первый символ, который повторяется в строке. При нахождении повторения можно использовать break.

Реализация собственного метода trim:
Напишите программу, которая удаляет пробелы в начале и в конце строки, используя циклы для поиска первого и последнего непробельного символа.

Подсчёт гласных и согласных:
Пройдитесь по символам строки и посчитайте количество гласных и согласных букв. Используйте условные операторы для проверки принадлежности символа к тому или иному типу.

Преобразование в верхний регистр вручную:
Пройдитесь по строке и, используя таблицу ASCII (или Unicode), преобразуйте каждую строчную букву в заглавную (без вызова встроенного toUpperCase).

Нахождение индекса первого вхождения заданного символа:
По заданному символу и строке найдите его первый индекс. Если символ не найден, верните -1.

Нахождение индекса последнего вхождения:
Реализуйте поиск последнего вхождения символа в строке, проходя по ней с конца.

Проверка: строка — число или нет:
Напишите программу, которая проверяет, состоит ли строка исключительно из цифр.

Извлечение букв из строки:
Создайте новую строку, содержащую только буквенные символы исходной строки (игнорируя цифры, знаки препинания и прочее).

Нахождение самого длинного слова (вариант 2):
Реализуйте метод, который возвращает самое длинное слово из предложения, используя цикл и условные операторы для сравнения длин.

Проверка: строка состоит из одинаковых символов:
Определите, состоит ли строка из одного и того же символа (например, "aaaaa").

Подсчёт гласных с использованием continue:
Пройдитесь по строке и посчитайте количество гласных, используя оператор continue для пропуска символов, не являющихся гласными.

Замена всех небуквенных символов на *:
Создайте новую строку, в которой все символы, не являющиеся буквами, заменены на символ *.

Преобразование строки в массив цифр:
Если строка состоит из цифр, создайте массив чисел, где каждый элемент — числовое значение соответствующего символа строки.

Сортировка символов строки (пузырьковая сортировка):
Реализуйте сортировку символов строки в алфавитном порядке, используя алгоритм пузырьковой сортировки.

Подсчёт вхождений каждого символа:
Пройдитесь по строке и для каждого символа посчитайте число его появлений. Выведите результаты в консоль (например, можно выводить в формате «символ: количество»).

Вывод уникальных символов:
Создайте новую строку, состоящую только из тех символов исходной строки, которые встречаются в ней единожды.

Нахождение всех позиций заданного символа:
Для указанного символа выведите список индексов, на которых он встречается в строке.

Проверка на шестнадцатеричное число:
Реализуйте метод, который проверяет, является ли строка корректным шестнадцатеричным числом (без использования регулярных выражений).

Простое сжатие строки:
Напишите программу, которая заменяет последовательности повторяющихся символов числом и самим символом (например, "aaabbc" → "3a2b1c"). Если сжатая строка получается длиннее, чем исходная, вернуть исходную.

Разбиение строки на слова и вывод по одному:
Разбейте строку на слова и выведите каждое слово на новой строке, используя цикл.

Проверка на анаграмму двух строк:
Напишите программу, которая определяет, являются ли две строки анаграммами друг друга (сравните количество вхождений каждого символа).

Поменять местами каждую пару символов:
Для заданной строки создайте новую, в которой каждая пара соседних символов поменяна местами. Если строка имеет нечётную длину, последний символ остаётся на месте.

Подсчёт вхождений подстроки без indexOf:
Реализуйте алгоритм, который ищет все вхождения заданной подстроки в строку с использованием циклов и условных операторов (без вызова indexOf).

Сумма чисел в строке:
Из строки, содержащей числа, разделённые пробелами, извлеките все числа, преобразуйте их в целые и найдите их сумму.

Извлечение символов на чётных позициях:
Создайте новую строку, состоящую из символов исходной строки, расположенных на чётных индексах (индексация с 0).

Извлечение символов на нечётных позициях:
Аналогично предыдущей задаче, но извлеките символы, расположенные на нечётных индексах.

Проверка на панграмму:
Напишите программу, которая определяет, содержит ли строка все буквы алфавита (панграмма). Учтите регистр и, при необходимости, игнорируйте символы, не являющиеся буквами.

Игра «Угадай слово»:
Реализуйте простую консольную игру, где программа загадывает слово, а пользователь пытается его угадать. Используйте циклы для организации попыток, if-else для проверки введённых символов/слов, а также break и continue для управления потоком игры (например, при неверном вводе или завершении игры).